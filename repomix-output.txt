This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-04T22:19:24.762Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
src/App.css
src/App.js
src/feed/components/Event.css
src/feed/components/Event.js
src/feed/components/EventList.js
src/feed/components/SportsDropdown.css
src/feed/components/SportsDropdown.js
src/feed/pages/EditEvent.js
src/feed/pages/feed.css
src/feed/pages/Feed.js
src/feed/pages/NewEvent.js
src/feed/pages/ViewEvent.css
src/feed/pages/ViewEvent.js
src/home/components/HomeContent.css
src/home/components/HomeContent.js
src/home/components/parrallax/Parrallax.css
src/home/components/parrallax/Parrallax.js
src/home/pages/Home.css
src/home/pages/Home.js
src/index.css
src/index.js
src/MockEvents.js
src/shared/components/context/auth-context.js
src/shared/components/FormElements/Button.css
src/shared/components/FormElements/Button.js
src/shared/components/FormElements/Input.css
src/shared/components/FormElements/Input.js
src/shared/components/Navigation/HomeNavigation.css
src/shared/components/Navigation/HomeNavigation.js
src/shared/components/Navigation/MainHeader.css
src/shared/components/Navigation/MainHeader.js
src/shared/components/Navigation/MainNavigation.css
src/shared/components/Navigation/MainNavigation.js
src/shared/components/Navigation/NavLinks.css
src/shared/components/Navigation/NavLinks.js
src/shared/components/Navigation/NavProfile.js
src/shared/components/Navigation/SideDrawer.css
src/shared/components/Navigation/SideDrawer.js
src/shared/components/Notifications/MarkNotificationAsRead.js
src/shared/components/Notifications/Notification.css
src/shared/components/Notifications/NotificationBell.js
src/shared/components/Notifications/NotificationItem.js
src/shared/components/Notifications/NotificationList.js
src/shared/components/UIElements/Avatar.css
src/shared/components/UIElements/Avatar.js
src/shared/components/UIElements/Backdrop.css
src/shared/components/UIElements/Backdrop.js
src/shared/components/UIElements/Card.css
src/shared/components/UIElements/Card.js
src/shared/components/UIElements/ErrorModal.js
src/shared/components/UIElements/LoadingSpinner.css
src/shared/components/UIElements/LoadingSpinner.js
src/shared/components/UIElements/Modal.css
src/shared/components/UIElements/Modal.js
src/shared/components/UIElements/TriangleButton.css
src/shared/components/UIElements/TriangleButton.js
src/shared/context/auth-context.js
src/shared/hooks/form-hook.js
src/shared/hooks/http-hook.js
src/shared/util/validators.js
src/sports/pages/SportPage.js
src/sports/pages/Sports.js
src/users/components/FriendRequests.js
src/users/components/FriendsList.js
src/users/components/PrivateRoute.js
src/users/pages/Auth.css
src/users/pages/Auth.js
src/users/pages/EditProfile.js
src/users/pages/Friends.js
src/users/pages/Profile.css
src/users/pages/Profile.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
/node_modules

================
File: package.json
================
{
  "name": "ouroutdoors",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "react-scripts start",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.6.8",
    "framer-motion": "^11.11.11",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.3",
    "react-scripts": "^5.0.1",
    "react-spring": "^9.7.4",
    "react-transition-group": "^4.4.5"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>OurOutdoors</title>
    

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Gaegu&display=swap" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Averia+Sans+Libre:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Gaegu&display=swap" rel="stylesheet">

  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="backdrop-hook"></div>
    <div id="modal-hook"></div>
    <div id="drawer-hook"></div>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *

================
File: src/App.css
================
:root {
    /* Font Family and Styles */
    --font-averia-sans: "Averia Sans Libre", sans-serif;
    --font-light: 300;
    --font-regular: 400;
    --font-bold: 700;
    --font-normal: normal;
    --font-italic: italic;
}

body{
    margin: 0;
}
.averia-sans-libre-light {
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 300;
    font-style: normal;
  }
  
  .averia-sans-libre-regular {
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 400;
    font-style: normal;
  }
  
  .averia-sans-libre-bold {
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 700;
    font-style: normal;
  }
  
  .averia-sans-libre-light-italic {
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 300;
    font-style: italic;
  }
  
  .averia-sans-libre-regular-italic {
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 400;
    font-style: italic;
  }
  
  .averia-sans-libre-bold-italic {
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 700;
    font-style: italic;
  }

================
File: src/App.js
================
import React, { useState, useEffect, useCallback } from 'react';
import {
  BrowserRouter as Router,
  Route,
  Routes,
  Navigate,
  useLocation
} from 'react-router-dom';

import MainNavigation from './shared/components/Navigation/MainNavigation';
import HomeNavigation from './shared/components/Navigation/HomeNavigation';
import Home from './home/pages/Home';
import Auth from './users/pages/Auth';
import Profile from './users/pages/Profile';
import EditProfile from './users/pages/EditProfile';
//import Friends from './users/pages/Friends';
import Feed from './feed/pages/Feed';
import NewEvent from './feed/pages/NewEvent';
import ViewEvent from './feed/pages/ViewEvent';
import EditEvent from './feed/pages/EditEvent';
import Sports from './sports/pages/Sports';
import SportPage from './sports/pages/SportPage';
import { AuthContext } from './shared/context/auth-context';

import './App.css';

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(true);
  const [showHomeNav, setShowHomeNav] = useState(false);

  const login = useCallback(() => {
    setIsLoggedIn(true);
  }, []);

  const logout = useCallback(() => {
    setIsLoggedIn(false);
  }, []);

  const location = useLocation();
  const isHomeRoute = location.pathname === '/';


  return (
    <AuthContext.Provider value={{isLoggedIn, login, logout}}>
      {isHomeRoute ? <div></div>/*<HomeNavigation /> */: <MainNavigation />}
      <main>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/auth" element={<Auth />} />
            <Route path="/profile/:userId" element={isLoggedIn ? <Profile /> : <Navigate to="/" replace />} />
            <Route path="/profile/edit/:userId" element={isLoggedIn ? <EditProfile /> : <Navigate to="/" replace />} />
            <Route path="/feed" element={isLoggedIn ? <Feed /> : <Navigate to="/" replace />} />
            <Route path="/event/new" element={isLoggedIn ? <NewEvent /> : <Navigate to="/" replace />} />
            <Route path="/event/edit/:eventId" element={isLoggedIn ? <EditEvent /> : <Navigate to="/" replace />} />
            <Route path="/event/:eventId" element={isLoggedIn ? <ViewEvent /> : <Navigate to="/" replace />} />
            <Route path="/sports" element={isLoggedIn ? <Sports /> : <Navigate to="/" replace />} />
            <Route path="/sports/:sportId" element={isLoggedIn ? <SportPage /> : <Navigate to="/" replace />} />
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </main>
    </AuthContext.Provider>
  );
};

export default App;

================
File: src/feed/components/Event.css
================
.event-item {
  list-style: none;
  margin-bottom: 1rem;
}

.event-item__content {
  display: flex;
  justify-content: space-between;
  align-items: stretch; /* Ensures that child elements fill the height */
  padding: 1rem;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.26);
}

.event-info {
  width: 80%;
  display: flex;
  flex-direction: column;
}

.author h3 {
  margin: 0;
  padding-bottom: 0.5rem;
}

.event-title-datetime {
  display: flex;
  align-items: center; /* Center align the title and datetime */
}

.event-title-datetime h2 {
  margin: 0;
  padding: 0;
}

.event-datetime {
  margin-left: 0.5em; /* Spacing between title and datetime */
}

.event-description {
  font-size: 0.9rem;
  color: #666;
  margin: 0.5rem 0;
}

.event-meta {
  font-size: 0.85rem;
  font-weight: bold;
  color: #444;
}

.event-interaction {
  width: 20%;
  display: flex;
  flex-direction: column;
  justify-content: flex-start; /* Adjusted for alignment */
  padding: 0.5rem;
  text-align: left;
}

.icon-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Center the icon and text horizontally */
  flex: 1; /* Allows each container to take up one third of the space */
  margin-bottom: 0.5rem; /* Space between each icon container */
}


.icon-container img {
  width: 24px; /* Smaller size for the icons */
  height: 24px;
  margin-right: 0.5rem; /* Space between icon and number */
}

.participant-icon-container, .like-icon-container, .comment-icon-container {
  flex: 1; /* Ensures each takes equal space */
}

================
File: src/feed/components/Event.js
================
import React, { useState, useContext } from 'react';
import { Link } from 'react-router-dom';

import Card from '../../shared/components/UIElements/Card';
import Button from '../../shared/components/FormElements/Button';
const participantIcon = '../../assets/participantIcon.png';
const likeIcon = '../../assets/likeIcon.png';
const commentIcon = '../../assets/commentIcon.png';

import './Event.css';

const Event = props => {
  const [showConfirmModal, setShowConfirmModal] = useState(false);

  const showDeleteWarningHandler = () => {
    setShowConfirmModal(true);
  };

  const cancelDeleteHandler = () => {
    setShowConfirmModal(false);
  };

  const confirmDeleteHandler = () => {
    setShowConfirmModal(false);
    console.log("DELETING...")
  };

  const commentsCount = props.comments.length;
  const likesCount = props.likes.length;

  const dateYear = props.datetime.slice(0,4)
  const dateMonthDay = props.datetime.slice(5,10)
  const displayDate = dateMonthDay + "-" + dateYear


  return (
    <li className="event-item">
      <Link to={`/event/${props.id}`} style={{ textDecoration: 'none', color: 'inherit' }}>

        <Card className="event-item__content">
          <div className="event-info">
            <div className='author'>
              <h3>{props.authorName}</h3>
            </div>
            <div className="event-title-datetime">
              <h2>{props.title}</h2>
              <p className="event-datetime">{displayDate}</p>
            </div>
            <p className="event-description">{props.description.substring(0, 50)}...</p>
            <p className="event-meta">{props.sportId} - {props.skill} - {props.location}</p>
          </div>
          <div className="event-interaction ">
            <div className="participant-icon-container icon-container">
              <img src={participantIcon} alt="Participants" />
                <span>{props.participants.length}</span>
            </div>
            <div className="like-icon-container icon-container">
              <img src={likeIcon} alt="Participants" />
                <span>{likesCount}</span>
            </div>
            <div className="comment-icon-container icon-container">
              <img src={commentIcon} alt="Participants" />
                <span>{commentsCount}</span>
            </div>
          </div>
        </Card> 
      </Link>
    </li>
  );
};

export default Event;

================
File: src/feed/components/EventList.js
================
import React from "react";

import Card from '../../shared/components/UIElements/Card';
import Event from './Event'
import Button from '../../shared/components/FormElements/Button';


const EventList = props => {
    if (props.items.length === 0){
        return <div className='event-list center'>
            <Card>
                <h2>No events found. Create one!</h2>
                <Button to="/event/new">New Event</Button>
            </Card>
        </div>
    }
    return <ul className='event-list'>
        {props.items.map(event => (
        <Event 

            key={event.id} 
            id={event.id}
            authorId={event.authorId}
            authorName={event.authorName} 
            sportId={event.sportId}
            skill={event.skill}
            //image={event.imageUrl} 
            title={event.title} 
            description={event.description} 
            location={event.location} 
            datetime={event.datetime}
            participants={event.participants}
            comments={event.comments} 
            likes={event.likes} 

            />
        ))}
    </ul>};

export default EventList;

================
File: src/feed/components/SportsDropdown.css
================
.sports-dropdown {
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
    text-align: center;
    font-family: Arial, sans-serif;
  }
  
  .sports-dropdown select {
    width: 100%;
    padding: 8px 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-bottom: 20px;
  }
  
  .sport-details {
    text-align: center;
    margin-top: 20px;
  }
  
  .sport-image {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin-bottom: 10px;
  }
  
  .sport-details h3 {
    margin: 10px 0 5px;
    font-size: 1.5em;
    color: #333;
  }
  
  .sport-details p {
    color: #666;
    font-size: 1em;
  }

================
File: src/feed/components/SportsDropdown.js
================
import React, { useState } from "react";
import "./SportsDropdown.css";

const DUMMY_SPORTS = [
  {
    id: "All",
    name: "All",
    image: "/pictures/sports/all.jpg",
    description: "",
  },
  {
    id: "Mountain-Biking",
    name: "Mountain Biking",
    image: "/pictures/sports/mountainBiking.jpg",
    description: "Shred down Mountains on a funny two-wheeled monkey invention",
  },
  {
    id: "Hiking",
    name: "Hiking",
    image: "/pictures/sports/hiking.jpg",
    description: "Lose yourself on the trail",
  },
  {
    id: "Scuba-Diving",
    name: "Scuba Diving",
    image: "/pictures/sports/scuba.jpg",
    description: "Disappear into the depths",
  },
  {
    id: "Kayaking",
    name: "Kayaking",
    image: "/pictures/sports/kayak.jpg",
    description: "Float down a chill and chilly river",
  },
  {
    id: "Running",
    name: "Running",
    image: "/pictures/sports/running.jpg",
    description: "The sport other sports use as punishment",
  },
  {
    id: "Skiing",
    name: "Skiing",
    image: "/pictures/sports/skiing.jpg",
    description: "Fast as you can down a mountain on sticks",
  },
  {
    id: "Other",
    name: "Other",
    image: "/pictures/sports/other.jpg",
    description: "Whatever your fancy is ;)",
  },
];

const SportsDropdown = () => {
  const [selectedSport, setSelectedSport] = useState(DUMMY_SPORTS[0]);

  const handleSportChange = (event) => {
    const sportId = event.target.value;
    const sport = DUMMY_SPORTS.find((s) => s.id === sportId);
    setSelectedSport(sport);
  };

  return (
    <div className="sports-dropdown">
      <select onChange={handleSportChange} value={selectedSport.id}>
        {DUMMY_SPORTS.map((sport) => (
          <option key={sport.id} value={sport.id}>
            {sport.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default SportsDropdown;

================
File: src/feed/pages/EditEvent.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

import Input from '../../shared/components/FormElements/Input';
import Button from '../../shared/components/FormElements/Button';
import Card from '../../shared/components/UIElements/Card';
import { useForm } from '../../shared/hooks/form-hook';
import { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';
import Modal from '../../shared/components/UIElements/Modal';
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import ErrorModal from '../../shared/components/UIElements/ErrorModal'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';

const EditEvent = () => {
    const eventId = useParams().eventId;
    const navigate = useNavigate();
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    const [showModal, setShowModal] = useState(false);
    const [loadedEvent, setLoadedEvent] = useState(null);

    const [formState, inputHandler, setFormData] = useForm({
        title: { value: '', isValid: false },
        description: { value: '', isValid: false },
        date: { value: '', isValid: false },
        time: { value: '', isValid: false },
        sportId: { value: '', isValid: false },
        skill: { value: '', isValid: false },
        location: { value: '', isValid: false },
        participants: { value:[], isValid:false},
        comments: { value:[], isValid: false},
        likes: { value:[], isValid: false }
    }, false);

    const sports = ['Moutain-Biking', 'Hiking', 'Running', 'Skiing','Scuba-Diving','Kayaking'];
    const skill = ['Beginner', 'Intermediate', 'Advanced'];

    useEffect(() => {
        const fetchEvent = async () => {
            try {
                const responseData = await sendRequest(`http://localhost:5000/api/events/${eventId}`);
                setLoadedEvent(responseData.event);
                const event = responseData.event;
                const date = event.datetime.split('T')[0];
                const time = event.datetime.split('T')[1].slice(0, 5);

                setFormData({
                    title: { value: event.title, isValid: true },
                    description: { value: event.description, isValid: true },
                    date: { value: date, isValid: true },
                    time: { value: time, isValid: true },
                    sportId: { value: event.sportId, isValid: true },
                    skill: { value: event.skill, isValid: true },
                    location: { value: event.location, isValid: true },
                    participants: { value:event.participants, isValid: true},
                    comments: { value: event.comments, isValid:true},
                    likes: { value:event.likes, isValid:true}

                }, true);
                //console.log(event.skill);
                //console.log("Fetched Event Data:", responseData.event);


            } catch (err) {
                console.error("Failed to fetch event data:", err);
            }
        };
        if (!loadedEvent) fetchEvent();
    }, [eventId, sendRequest, setFormData, loadedEvent]);

    const eventUpdateHandler = async event => {
        event.preventDefault();
        try {
            //console.log(formState.inputs.skill.value);

            await sendRequest(
                `http://localhost:5000/api/events/${eventId}`,
                'PATCH',
                JSON.stringify({
                    title: formState.inputs.title.value,
                    description: formState.inputs.description.value,
                    datetime: `${formState.inputs.date.value}T${formState.inputs.time.value}:00Z`,
                    sportId: formState.inputs.sportId.value,
                    skill: formState.inputs.skill.value,
                    location: formState.inputs.location.value,
                    participants: formState.inputs.participants.value,
                    comments: formState.inputs.comments.value,
                    likes: formState.inputs.likes.value
                }),
                { 'Content-Type': 'application/json' }
            );
            setShowModal(true);
        } catch (err) {
            console.error('Failed to update the event:', err);
        }
    };

    if (isLoading || !loadedEvent) {
        return <LoadingSpinner />;
    }

    return (
        <>
            <ErrorModal error={error} onClear={clearError} />
            <Modal
                show={showModal}
                onCancel={() => setShowModal(false)}
                header="Event Updated Successfully!"
                footer={<Button onClick={() => navigate('/feed')}>Go to Feed</Button>}
            >
                <p>Your event has been successfully updated and is now live!</p>
            </Modal>
            <Card>
                <form className="event-form" onSubmit={eventUpdateHandler}>
                    <Input 
                        element="input" 
                        id="title" 
                        type="text" 
                        label="Event Title"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                        initialValue={formState.inputs.title.value} 
                        initialValid={formState.inputs.title.isValid} />
                    <Input 
                        element="textarea" 
                        id="description" 
                        label="Description"
                        validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(5)]} 
                        onInput={inputHandler}
                        initialValue={formState.inputs.description.value} 
                        initialValid={formState.inputs.description.isValid} />
                    <Input 
                        element="input" 
                        id="date" type="date" 
                        label="Date"
                           validators={[VALIDATOR_REQUIRE()]} 
                           onInput={inputHandler}
                           initialValue={formState.inputs.date.value} 
                           initialValid={formState.inputs.date.isValid} />
                    <Input 
                        element="input" 
                        id="time" 
                        type="time" 
                        label="Time"
                           validators={[VALIDATOR_REQUIRE()]} 
                           onInput={inputHandler}
                           initialValue={formState.inputs.time.value} 
                           initialValid={formState.inputs.time.isValid} />
                    <Input 
                        element="select" 
                        id="sportId" 
                        label="Sport"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                        options={sports} 
                        initialValue={formState.inputs.sportId.value} 
                        initialValid={formState.inputs.sportId.isValid} />
                    <Input 
                        element="select" 
                        id="skill" 
                        label="Skill"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                        options={skill} 
                        initialValue={formState.inputs.skill.value} 
                        initialValid={formState.inputs.skill.isValid} />
                    <Input 
                        element="input" 
                        id="location" 
                        type="text" 
                        label="Location"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                        initialValue={formState.inputs.location.value} 
                        initialValid={formState.inputs.location.isValid} />
                <Button type="submit" disabled={!formState.isValid}>Update Event</Button>
                </form>
            </Card>
        </>
    );
};

export default EditEvent;

================
File: src/feed/pages/feed.css
================
.interaction-container{
display: flex;
flex-direction: row;
justify-content: center;
}
.newButton{
    width: 3em;
    height: 3em;
    border: 1px solid black;
    border-radius: 50%;
    cursor: pointer;

}

.toggle-buttons {
    display: flex;
    justify-content: center;
    margin: 20px 0;
  }
  
  .toggle-button {
    flex: 1;
    padding: 10px 20px;
    font-size: 16px;
    border: none;
    cursor: pointer;
    background-color: #f0f0f0;
    color: #333;
    transition: background-color 0.3s, color 0.3s;
  }
  
  .toggle-button:first-child {
    border-radius: 8px 0 0 8px;
  }
  
  .toggle-button:last-child {
    border-radius: 0 8px 8px 0;
  }
  
  .toggle-button:hover {
    background-color: #e0e0e0;
  }
  
  .toggle-button.selected {
    background-color: #333;
    color: white;
  }

================
File: src/feed/pages/Feed.js
================
import React, { useState, useEffect } from "react";
import { Link, useParams, useNavigate } from 'react-router-dom';

import Button from '../../shared/components/FormElements/Button';
import EventList from '../components/EventList'
import ErrorModal from '../../shared/components/UIElements/ErrorModal';
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';
import SportsDropdown from "../components/SportsDropdown";
import { useHttpClient } from '../../shared/hooks/http-hook';

import './feed.css';

const Feed = () => {
    
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    const [loadedEvents, setLoadedEvents] = useState();
    const [isPublicSelected, setIsPublicSelected] = useState(true);
  
    useEffect(() => {
      const fetchEvents = async () => {
        try {
          const responseData = await sendRequest(
            'http://localhost:5000/api/events'
          );
  
          setLoadedEvents(responseData.events);
        } catch (err) {}
      };
      fetchEvents();

    }, [sendRequest]);
    

    const navigate = useNavigate();

    const navigateToNewEvent = () => {
        navigate('/event/new');
    };

    const handleToggle = (isPublic) => {
      setIsPublicSelected(isPublic);
    };
    
    console.log(loadedEvents)
    return (
        <>
          <div className="interaction-container">
            <button className='newButton' onClick={navigateToNewEvent}>+</button>
            <SportsDropdown/>
            <div className="toggle-buttons">
              <button
                className={`toggle-button ${isPublicSelected ? "selected" : ""}`}
                onClick={() => handleToggle(true)}
              >
                Public
              </button>
              <button
                className={`toggle-button ${!isPublicSelected ? "selected" : ""}`}
                onClick={() => handleToggle(false)}
              >
                Friends
              </button>
            </div>
          </div>
            <ErrorModal error={error} onClear={clearError} />
      {isLoading && (
        <div className="center">
          <LoadingSpinner />
        </div>
      )}
      {!isLoading && loadedEvents && <EventList items={loadedEvents} /> }
        </>
    );

};

export default Feed;

================
File: src/feed/pages/NewEvent.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

import Input from '../../shared/components/FormElements/Input';
import Button from '../../shared/components/FormElements/Button';
import Card from '../../shared/components/UIElements/Card';
import { useForm } from '../../shared/hooks/form-hook';
import { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';
import Modal from '../../shared/components/UIElements/Modal';
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import ErrorModal from '../../shared/components/UIElements/ErrorModal'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';

const NewEvent = () => {
    const navigate = useNavigate();
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    const [showModal, setShowModal] = useState(false);

    const sports = ['Mountain-Biking', 'Hiking', 'Running', 'Skiing', 'Scuba-Diving', 'Kayaking'];
    const skills = ['Beginner', 'Intermediate', 'Advanced'];

    const [formState, inputHandler] = useForm({
        title: { value: '', isValid: false },
        description: { value: '', isValid: false },
        date: { value: '', isValid: false },
        time: { value: '', isValid: false },
        sportId: { value: '', isValid: false },
        skill: { value: '', isValid: false },
        location: { value: '', isValid: false }
    }, false);

    


    const eventSubmitHandler = async event => {
        event.preventDefault();
        if (!formState.isValid) {
            console.log("Form is not valid:", formState);
            return;
        }
        try {
            await sendRequest(
                `http://localhost:5000/api/events/`,
                'POST',
                JSON.stringify({
                    title: formState.inputs.title.value,
                    description: formState.inputs.description.value,
                    userId: '6626b2cf4c383e4719160c6a', // Hardcoded user ID for the sake of example
                    datetime: `${formState.inputs.date.value}T${formState.inputs.time.value}:00Z`,
                    sportId: formState.inputs.sportId.value,
                    skill: formState.inputs.skill.value,
                    location: formState.inputs.location.value,
                    participants: [], // Initialize as empty or from state if needed
                    comments: [], // Initialize as empty or handle form input for comments
                    likes: [] // Initialize as empty
                }),
                { 'Content-Type': 'application/json' }
            );
            setShowModal(true);
            navigate('/feed'); // Navigate after successful creation
        } catch (err) {
            console.error('Failed to create the event:', err);
        }
    };

    const hideModal = () => {
        setShowModal(false);
    };

    const navigateToFeed = () => {
        hideModal();
        navigate('/feed');
    };

    //console.log(formState)

    return (
        <>
            <Modal
                show={showModal}
                onCancel={hideModal}
                header="Event Created Successfully!"
                footerClass="event-form__modal-actions"
                footer={
                    <>
                        <Button onClick={navigateToFeed}>Go to Feed</Button>
                    </>
                }>
                <p>Your event has been successfully created and is now live!</p>
            </Modal>
            <Card>
                <form className="event-form" onSubmit={eventSubmitHandler}>
                    <Input
                        element="input"
                        id="title"
                        type="text"
                        label="Event Title"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                    />
                    <Input
                        element="textarea"
                        id="description"
                        label="Description"
                        validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(5)]} 
                        onInput={inputHandler}
                    />
                    <Input
                        element="input"
                        id="date"
                        type="date"
                        label="Date"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                    />
                    <Input
                        element="input"
                        id="time"
                        type="time"
                        label="Time"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                    />
                    <Input
                        element="select"
                        id="sportId"
                        label="Sport Type"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                        options={sports}  //dropdown options
                    />
                    <Input
                        element="select"
                        id="skill"
                        label="Skill Level"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                        options={skills} //dropdown options
                    />
                    <Input
                        element="input"
                        id="location"
                        type="text"
                        label="Location"
                        validators={[VALIDATOR_REQUIRE()]} 
                        onInput={inputHandler}
                    />
                    <Button type="submit" disabled={!formState.isValid}>
                        Create Event
                    </Button>
                </form>
            </Card>
        </>

    );
};

export default NewEvent;

================
File: src/feed/pages/ViewEvent.css
================
.comments-container {
    border: 1px solid #ccc; /* Gray border */
    padding: 16px; /* Padding around the content inside the container */
    display: flex; /* Enables the use of flexbox layout */
    flex-direction: column; /* Aligns children (comments, input, button) in a column */
    align-items: center; /* Centers items horizontally within the container */
    width: 100%; /* Ensures the container takes full width of its parent */
  }
  .comments-container div{
    width: 66%;  
  }
  
  .comment-item {
    background-color: #f9f9f9; /* Light gray background for each comment */
    padding: 8px; /* Padding inside each comment */
    border-radius: 4px; /* Rounded corners for comment items */
    margin-bottom: 8px; /* Space between comments */
    width: 100%; /* Full width within the container */
    box-sizing: border-box; /* Includes padding and border in the width */
  }
  
  .comments-input {
    width: 100%; /* Full width for the input */
    margin-bottom: 8px; /* Space between the input and the button */
  }
  
  .comments-button {
    width: auto; /* Auto width based on content */
    padding: 8px 16px; /* Padding around the button text */
  }

================
File: src/feed/pages/ViewEvent.js
================
import React, { useState, useEffect, useContext, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

import Card from '../../shared/components/UIElements/Card';
import Button from '../../shared/components/FormElements/Button';
import Input from '../../shared/components/FormElements/Input';
import Modal from '../../shared/components/UIElements/Modal';
import { AuthContext } from '../../shared/context/auth-context'; 
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import ErrorModal from '../../shared/components/UIElements/ErrorModal'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';

import './ViewEvent.css';


const ViewEvent = () => {
  const { eventId } = useParams();
  const USER_ID = '6626b2cf4c383e4719160c6a';//
  const auth = useContext(AuthContext);
  const navigate = useNavigate();
  const { isLoading, error, sendRequest, clearError } = useHttpClient();


  const [eventData, setEventData] = useState(null);  

  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [isJoined, setIsJoined] = useState(false);  
  const [isLiked, setIsLiked] = useState(false);
  const [comment, setComment] = useState('');
  const [commentIsValid, setCommentIsValid] = useState(false);
  const [commentInputKey, setCommentInputKey] = useState(Date.now());
  const [userNames, setUserNames] = useState({});

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        const responseData = await sendRequest(
          `http://localhost:5000/api/events/${eventId}`
        );
        setEventData(responseData.event);

        //set intial joined status
        if (responseData.event.participants.includes(USER_ID)) {
          setIsJoined(true);
        } else {
          setIsJoined(false);
        }

        //set intial like status
        if (responseData.event.likes.includes(USER_ID)) {
          setIsLiked(true);
        } else {
          setIsLiked(false);
        }

        // Fetch usernames for comments
        const fetchedUserNames = {};
        for (const comment of responseData.event.comments) {
          const userName = await userIdTouserName(comment.userId);
          fetchedUserNames[comment.userId] = userName;
        }
        setUserNames(fetchedUserNames); // Store usernames in state

      } catch (err) {}
    };
    fetchEvent();
  }, [eventId, sendRequest]);

  const toggleLikeEvent = useCallback(async () => {
    try {
      const responseData = await sendRequest(
        `http://localhost:5000/api/events/${eventId}/like`,
        'PATCH',
        JSON.stringify({ userId: USER_ID }),
        { 'Content-Type': 'application/json' }
      );
      setEventData(prevEventData => ({
        ...prevEventData,
        likes: responseData.event.likes
      }));
      setIsLiked(prev => !prev);
    } catch (err) {
      console.error('Error toggling like:', err);
    }
  }, [eventId, auth.userId, sendRequest]);


  const postCommentHandler = useCallback(async () => {
    if (commentIsValid) {
      try {
        await sendRequest(
          `http://localhost:5000/api/events/${eventId}/comments`,
          'POST',
          JSON.stringify({
            userId: USER_ID,
            text: comment
          }),
          {
            'Content-Type': 'application/json'
          }
        );
        setEventData(prevEventData => ({
          ...prevEventData,
          comments: [...prevEventData.comments, { userId: USER_ID, text: comment }]
        }));
        setComment('');
        setCommentIsValid(false);
      } catch (err) {
        // handle errors as needed
      }
    }
  }, [USER_ID, comment, commentIsValid, eventId, sendRequest]);

  const userIdTouserName = async (userIdIn) => {
    console.log(userIdIn)
    try {
      const responseData = await sendRequest(
        `http://localhost:5000/api/users/${userIdIn}`,
        'GET',
        null, // No body for a GET request
        { 'Content-Type': 'application/json' }
      );
  
      // Assuming the API returns a user object with a name property
      const userName = responseData.user.name;
  
      return userName;  // Return the user's name
    } catch (err) {
      console.error('Error fetching user:', err);
      return null; // Handle error by returning null or an appropriate fallback
    }
  }

  //join and leave logic
  const joinEvent = async () => {
    try {
      const responseData = await sendRequest(
        `http://localhost:5000/api/events/${eventId}/join`,
        'PATCH',
        JSON.stringify({ userId: USER_ID }),
        { 'Content-Type': 'application/json' }
      );
      setEventData(prevEventData => ({
        ...prevEventData,
        participants: [...prevEventData.participants, USER_ID]
      }));
    } catch (err) {
      // Optionally handle error
    }
  };

  const leaveEvent = async () => {
    try {
      const responseData = await sendRequest(
        `http://localhost:5000/api/events/${eventId}/leave`,
        'PATCH',
        JSON.stringify({ userId: USER_ID }),
        { 'Content-Type': 'application/json' }
      );
      setEventData(prevEventData => ({
        ...prevEventData,
        participants: prevEventData.participants.filter(id => id !== USER_ID)
      }));
    } catch (err) {
      // Optionally handle error
    }
  };

  const toggleJoinEvent = () => {
    if (eventData.participants.includes(USER_ID)) {
      console.log(eventData.participants.includes(USER_ID) ? 'joined': 'not joined');
      //true
      setIsJoined(false);
      leaveEvent();
    } else {
      console.log(eventData.participants.includes(USER_ID) ? 'joined': 'not joined');
      setIsJoined(true);
      joinEvent();
    }
  };


  if (error) {
    return <ErrorModal error={error} onClear={clearError} />;
  }

  if (isLoading || !eventData) {
    return (
      <div className="center">
        <LoadingSpinner />
      </div>
    );
  }

  const handleInput = (id, value, isValid) => {
    if (id === 'comment') {
      setComment(value);
      setCommentIsValid(isValid);
    }
  };


  const showDeleteWarningHandler = () => {
    setShowConfirmModal(true);
  };

  const cancelDeleteHandler = () => {
    setShowConfirmModal(false);
  };

  const confirmDeleteHandler = async () => {
    try {
      await sendRequest(
        `http://localhost:5000/api/events/${eventId}`,
        'DELETE'
      );
      navigate('/feed');
    } catch (err) {
      console.error('Failed to delete the event:', err);
    }
    setShowConfirmModal(false); 
  };

  const navigateToEditEvent = () => {
    navigate(`/event/edit/${eventId}`);
  };

  //Converting datetime to more readable format
  const dateYear = eventData.datetime.slice(0,4)
  const dateMonthDay = eventData.datetime.slice(5,10)
  const hour = eventData.datetime.slice(12,13)
  let amPm
  if (hour > 13){
    hour - 12
    amPm = ' PM'
  } else {
    amPm = ' AM'
  }
  const displayTime = hour + eventData.datetime.slice(13,16) + amPm

  const displayDate = dateMonthDay + "-" + dateYear + " " + displayTime

  /*
  if (eventData.participants.includes(USER_ID)) {
    setIsJoined(true);
  }
*/
  return (
    <>
      <Modal
        show={showConfirmModal}
        onCancel={cancelDeleteHandler}
        header="Are you sure you want to delete this event?"
        footerClass="place-item__modal-actions"
        footer={
          <>
            <Button inverse onClick={cancelDeleteHandler}>CANCEL</Button>
            <Button danger onClick={confirmDeleteHandler}>DELETE</Button>
          </>
        }>
        <p>This action cannot be undone.</p>
      </Modal>
      <Card>
        <h2>{eventData.title}</h2>
        <p>{eventData.description}</p>
        <p>Sport: {eventData.sportId}</p>
        <p>Date and Time: {displayDate}</p>
        <p>Skill Level: {eventData.skill}</p>
        <Button onClick={toggleJoinEvent}>
          {isJoined ? 'Leave' : 'Join'}
        </Button>
        <Button onClick={toggleLikeEvent}>
          {isLiked ? 'Unlike' : 'Like'}
        </Button>
        {auth.isLoggedIn && <Button onClick={navigateToEditEvent}>EDIT</Button>}
        {auth.isLoggedIn && <Button danger onClick={showDeleteWarningHandler}>DELETE</Button>}
        <div className='comments-container'>
          {eventData.comments.map((comment, index) => (
            <p className='comment-item' key={index}>{userNames[comment.userId]} { ":  "} {comment.text}</p>
          ))}
          <Input
            className='comments-input'
            key={commentInputKey}
            id="comment"
            element="textarea"
            label="Your Comment"
            validators={[]}
            errorText="Please enter a valid comment."
            onInput={handleInput}
            initialValue={comment}
          />
          <Button className='comments-button' type="button" onClick={postCommentHandler} disabled={!commentIsValid}>
            Post Comment
          </Button>
        </div>
      </Card>
    </>
  );
};

export default ViewEvent;

================
File: src/home/components/HomeContent.css
================
.home-content-container {
    z-index: 21;
    background: rgb(0,0,0);
    background: linear-gradient(90deg, rgba(0,0,0,1) 0%, rgba(0,14,20,1) 100%);
    color: white;
    width: 100%;
    margin-top: 170vh;
    height: 100%;
}

.home-content-details {
    display: flex;
    flex-direction: row;
    gap: 25%;
    margin: 0% 10% 10% 10%;
    padding: 5%;
    font-size: 250%;
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 300;
    font-style: normal;
    text-align: center;
}

.get-outside-container {
    padding: 0% 39% 30% 39%;
    height: 100%;
}

.get-outside-button {
    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 7%;
    color: white;
    border-radius: 40px;
    overflow: hidden;
    cursor: pointer;
    font-size: 1.2rem;
    line-height: 64px;
    text-transform: uppercase;
    border: 1px solid white;
}

.get-outside-background {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    transform: translate(-50%, -50%);
    transition: all 0.5s ease-out;
    z-index: 1;
}

.get-outside-button:hover .get-outside-background {
    width: 300%;
    height: 300%;
    opacity: 1;
}

.get-outside-button span {
    position: relative;
    z-index: 2;
    font-size: x-large;
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 900;
    font-style: normal;
}

================
File: src/home/components/HomeContent.js
================
import React, { useContext } from "react";
import { useNavigate } from "react-router-dom";
import './HomeContent.css';
import { motion } from "framer-motion";
import { AuthContext } from '../../shared/context/auth-context';


const HomeContent = () => {
    const navigate = useNavigate();
    const auth = useContext(AuthContext);

    const handleButtonClick = () => {

        if (auth.isLoggedIn) {
            navigate('/feed');
        } else {
            navigate('/auth');
        }
    };

    return (
        <div className="home-content-container">
            <div className="home-content-details">
                <div>
                    Do you need a ride to get out of the frontcountry and into the woods with friends?
                </div>
                <div>
                    Do you want to find the people to explore the great outdoors and do the things you love?
                </div>
            </div>
        
            <div className="get-outside-container">
                <motion.div
                    className="get-outside-button"
                    whileHover={{
                        scale: 1.05,
                    }}
                    transition={{
                        type: "spring",
                        stiffness: 300,
                        damping: 20,
                    }}
                    onClick={handleButtonClick}
                >
                    <div className="get-outside-background" />
                    <span>Get Outside</span>
                </motion.div>
            </div>
        </div>
    );
};

export default HomeContent;

================
File: src/home/components/parrallax/Parrallax.css
================
.parrallax-container{
    position: absolute;
    display: grid;
    width:100%;
    height:100vh;
    /* overflow: hidden; */
    place-items: center;
    padding-top:5vh;
}

.parrallax-image {
    will-change: transform;
    background-position: bottom;
    background-size: cover;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transform: translateY(0);
    transition: transform 0.2s ease-out; /* Smoother animation */
}

.parrallax-content {
    position: relative;
    margin-top: 0em; /* Controls spacing above images */
    height: 100vh;
    width: 100%;
}

.parrallax-layer6{
    z-index: 8;
    background-image: url('./parrallax/Layer6.png');
}

.parrallax-text{
    position: relative;
    color:white;
    z-index: 17;
    text-align: center;
    padding-top:25vh;
    font-size:600%;
    font-family: "Averia Sans Libre", sans-serif;
    font-weight: 400;
    font-style: normal;
      
}

.parrallax-layer5{
    z-index: 12;
    background-image: url('./parrallax/Layer5.png');
}

.parrallax-layer4{
    z-index: 14;
    background-image: url('./parrallax/Layer4.png');
}

.parrallax-layer3{
    z-index: 16;
    background-image: url('./parrallax/Layer3.png');
}

.parrallax-layer2{
    z-index: 18;
    background-image: url('./parrallax/Layer2.png');
}

.parrallax-layer1{
    z-index: 20;
    background-image: url('./parrallax/Layer1.png');
}

@media (max-: 900px) {
    .parrallax-container{
        padding-top: 25%;
    }
}

================
File: src/home/components/parrallax/Parrallax.js
================
import React, { useRef, useState, useEffect } from "react";
import { motion, useScroll, useTransform, motionValue } from 'framer-motion';
import throttle from 'lodash.throttle';


import './Parrallax.css';

const Parrallax = () => {

    const ref = useRef(null);

    const {scrollYProgress} = useScroll({
        target: ref,
        offset: ['start start', 'end start'],
    });


/*
    // Create a throttled MotionValue
    const throttledProgress = motionValue(0);

    // Throttle function to update `throttledProgress`
    const updateThrottledProgress = throttle((latestProgress) => {
        throttledProgress.set(latestProgress);
    }, 10); // Adjust the timing as needed

    // Update `throttledProgress` whenever `scrollYProgress` changes
    useEffect(() => {
        const unsubscribe = scrollYProgress.onChange(updateThrottledProgress);
        return () => unsubscribe(); // Cleanup
    }, [scrollYProgress]);

    // Use throttled motion value in transforms
    const Layer5Y = useTransform(throttledProgress, [0, 1], ['0%', '100%']);
    const Layer4Y = useTransform(throttledProgress, [0, 1], ['0%', '75%']);
    const Layer3Y = useTransform(throttledProgress, [0, 1], ['0%', '50%']);
    const Layer2Y = useTransform(throttledProgress, [0, 1], ['0%', '25%']);
    const Layer1Y = useTransform(throttledProgress, [0, 1], ['0%', '0%']);
    const textY = useTransform(throttledProgress, [0, 1], ['0%', '120%']);
    */
    const Layer5Y = useTransform(scrollYProgress, [0, 1], ['0%', '100%']);
    const Layer4Y = useTransform(scrollYProgress, [0, 1], ['0%', '75%']);
    const Layer3Y = useTransform(scrollYProgress, [0, 1], ['0%', '50%']);
    const Layer2Y = useTransform(scrollYProgress, [0, 1], ['0%', '25%']);
    const Layer1Y = useTransform(scrollYProgress, [0, 1], ['0%', '0%']);
    const textY = useTransform(scrollYProgress, [0, 1], ['0%', '120%']);

    return(
        <>  
            <div className="parrallax-container"
                ref={ref}
            >
            
                <div className="parrallax-content">

                    <motion.h1 className='parrallax-text'
                        style={{y:textY}}
                    >OurOutdoors</motion.h1>


                    {/*
                    <motion.div className="parrallax-image parrallax-layer6"
                    ></motion.div>
                    */}

                    
                    <motion.div className="parrallax-image parrallax-layer5"
                        style={{backgroundImage:'/assets/parrallax/Layer5--.png',
                                y:Layer5Y
                        }}
                    ></motion.div>

                    
                    <motion.div className="parrallax-image parrallax-layer4"
                        style={{backgroundImage:'/assets/parrallax/Layer4--.png',
                            y:Layer4Y

                        }}
                    ></motion.div>

                    
                    <motion.div className="parrallax-image parrallax-layer3"
                        style={{backgroundImage:'/assets/parrallax/Layer3--.png',
                            y:Layer3Y

                        }}
                    ></motion.div>

                    
                    <motion.div className="parrallax-image parrallax-layer2"                    
                        style={{backgroundImage:'/assets/parrallax/Layer2--.png',
                            y:Layer2Y

                        }}
                    ></motion.div>

                    
                    <motion.div className="parrallax-image parrallax-layer1"
                        style={{backgroundImage:'/assets/parrallax/Layer1--.png',
                            y:Layer1Y

                        }}
                    ></motion.div>
                
                </div>
            </div>  

        </>
    )
}

export default Parrallax;

================
File: src/home/pages/Home.css
================
.home-container {
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.parallax-wrapper {
    position: relative;
    width: 100%;
    height: 100vh; 
}

================
File: src/home/pages/Home.js
================
import React from 'react';
import { useNavigate } from 'react-router-dom';


import './Home.css';
import HomeContent from '../components/HomeContent';
import Parrallax from '../components/parrallax/Parrallax';

const Home = () => {




    return (
        <div className="home-container">
            {/* <div className="parallax-wrapper">
                <Parrallax />
            </div> */}
            <Parrallax/>
            <HomeContent/>
        </div>
    );
};

export default Home;

================
File: src/index.css
================
@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700&display=swap');

* {
  box-sizing: border-box;
}

html {
  font-family: 'Open Sans', sans-serif;
}

body {
  margin: 0px;
  background: #4d4d4d;
}

.slide-in-left-enter {
  transform: translateX(-100%);
}

.slide-in-left-enter-active {
  transform: translateX(0);
  opacity: 1;
  transition: all 200ms;
}

.slide-in-left-exit {
  transform: translateX(0%);
  opacity: 1;
}

.slide-in-left-exit-active {
  transform: translateX(-100%);
  opacity: 0;
  transition: all 200ms;
}

.center {
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
}

================
File: src/index.js
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter as Router } from 'react-router-dom';

import App from './App';

const container = document.getElementById('root');
const root = createRoot(container); // create a root

root.render(
    <Router>
        <App />
    </Router>
);

================
File: src/MockEvents.js
================
const mockEvents = [
    {
        id: 'e1',
        authorId: 'u1',
        authorName: 'humaen',
        sportId: 'Mountain Biking',
        title: 'Bolton Potholes',
        description: 'I am going to Bolton Potholes at 9am to do the sunrise trail, I have 3 seats in my car and a bike rack!',
        imageUrl: '',
        datetime: '4/20/24 4:00pm',
        address: '1 Bolton Valley Access Rd, Bolton, VT 05676', 
        participants: ['u2','u3','u4'],
        comments: {
            comments: [
                'i love mountain biking',
                'im pumped',
                'ill be there'
            ]
        },
        likes: {
            likes: [
                'u2','u3','u4'
            ]
        }
    },
    {
        id: 'e2',
        authorId: 'u1',
        authorName: 'humaen',
        sportId: 'Mountain Biking',
        title: 'Perry Hill',
        description: 'Join us for a challenging ride at Perry Hill. We leave at noon.',
        imageUrl: '',
        datetime: '5/15/24 12:00pm',
        address: 'Waterbury, VT 05676',
        participants: ['u5', 'u6'],
        comments: {
            comments: [
                'Sounds like a great challenge!',
                'Hope the weather holds up.'
            ]
        },
        likes: {
            likes: [
                'u5', 'u6'
            ]
        }
    },
    {
        id: 'e3',
        authorId: 'u2',
        authorName: 'trailrunner',
        sportId: 'Mountain Biking',
        title: 'Night Rides at Saxon Hill',
        description: 'Night riding fun! Lights required. Meeting at 8pm.',
        imageUrl: '',
        datetime: '4/25/24 8:00pm',
        address: 'Essex, VT 05452',
        participants: ['u1', 'u7', 'u8'],
        comments: {
            comments: [
                'First night ride, can’t wait!',
                'See you all there.'
            ]
        },
        likes: {
            likes: [
                'u7', 'u8'
            ]
        }
    },
    {
        id: 'e4',
        authorId: 'u3',
        authorName: 'bikerJoe',
        sportId: 'Mountain Biking',
        title: 'Family Fun Ride',
        description: 'Family-friendly ride through the local park. Kids welcome.',
        imageUrl: '',
        datetime: '6/10/24 10:00am',
        address: 'Maple Street Park, Essex Junction, VT 05452',
        participants: ['u2', 'u9', 'u10'],
        comments: {
            comments: [
                'Perfect for my little ones!',
                'Thanks for organizing this.'
            ]
        },
        likes: {
            likes: [
                'u9', 'u10'
            ]
        }
    },
    {
        id: 'e5',
        authorId: 'u4',
        authorName: 'pedalPusher',
        sportId: 'Mountain Biking',
        title: 'Gravel Grinder 50k',
        description: 'Gravel grinding event covering 50 kilometers. Bring hydration!',
        imageUrl: '',
        datetime: '7/05/24 6:30am',
        address: 'Shelburne, VT',
        participants: ['u3', 'u1'],
        comments: {
            comments: [
                'Ready to grind it out!',
                'My first gravel event, excited!'
            ]
        },
        likes: {
            likes: [
                'u3', 'u1'
            ]
        }
    }
];

export default mockEvents;

================
File: src/shared/components/context/auth-context.js
================
import React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext(null);

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (userData) => {
    setUser(userData);
  };

  const logout = () => {
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

================
File: src/shared/components/FormElements/Button.css
================
.button {
  font: inherit;
  padding: 0.5rem 1.5rem;
  border: 1px solid #ff0055;
  border-radius: 4px;
  background: #ff0055;
  color: white;
  cursor: pointer;
  margin-right: 1rem;
  text-decoration: none;
  display: inline-block;
}

.button:focus {
  outline: none;
}

.button:hover,
.button:active {
  background: #ff4382;
  border-color: #ff4382;
}

.button--inverse {
  background: transparent;
  color: #ff0055;
}

.button--inverse:hover,
.button--inverse:active {
  color: white;
  background: #ff0055;
}

.button--danger {
  background: #830000;
  border-color: #830000;
}

.button--danger:hover,
.button--danger:active {
  background: #f34343;
  border-color: #f34343;
}

.button:disabled,
.button:hover:disabled,
.button:active:disabled {
  background: #ccc;
  color: #979797;
  border-color: #ccc;
  cursor: not-allowed;
}

.button--small {
  font-size: 0.8rem;
}

.button--big {
  font-size: 1.5rem;
}

================
File: src/shared/components/FormElements/Button.js
================
import React from 'react';
import { Link } from 'react-router-dom';

import './Button.css';

const Button = props => {
  if (props.href) {
    return (
      <a
        className={`button button--${props.size || 'default'} ${props.inverse &&
          'button--inverse'} ${props.danger && 'button--danger'}`}
        href={props.href}
      >
        {props.children}
      </a>
    );
  }
  if (props.to) {
    return (
      <Link
        to={props.to}
        className={`button button--${props.size || 'default'} ${props.inverse &&
          'button--inverse'} ${props.danger && 'button--danger'}`}
      >
        {props.children}
      </Link>
    );
  }
  return (
    <button
      className={`button button--${props.size || 'default'} ${props.inverse &&
        'button--inverse'} ${props.danger && 'button--danger'}`}
      type={props.type}
      onClick={props.onClick}
      disabled={props.disabled}
    >
      {props.children}
    </button>
  );
};

export default Button;

================
File: src/shared/components/FormElements/Input.css
================
.form-control {
    margin: 1rem 0;
  }
  
  .form-control label,
  .form-control input,
  .form-control textarea {
    display: block;
  }
  
  .form-control label {
    font-weight: bold;
    margin-bottom: 0.5rem;
  }
  
  .form-control input,
  .form-control textarea {
    width: 100%;
    font: inherit;
    border: 1px solid #ccc;
    background: #f8f8f8;
    padding: 0.15rem 0.25rem;
  }
  
  .form-control input:focus,
  .form-control textarea:focus {
    outline: none;
    background: #ebebeb;
    border-color: #510077;
  }
  
  .form-control--invalid label,
  .form-control--invalid p {
    color: red;
  }
  
  .form-control--invalid input,
  .form-control--invalid textarea {
    border-color: red;
    background: #ffd1d1;
  }

================
File: src/shared/components/FormElements/Input.js
================
import React, { useReducer, useEffect } from "react";
import { validate } from "../../util/validators";
import './Input.css';

const inputReducer = (state, action) => {
    switch(action.type) {
        case 'CHANGE':
            return {
                ...state,
                value: action.val,
                isValid: validate(action.val, action.validators)
            };
        case 'TOUCH':
            return {
                ...state,
                isTouched: true
            };
        default:
            return state;
    }
};

const Input = props => {
    const [inputState, dispatch] = useReducer(inputReducer, {
        value: props.initialValue || '', 
        isValid: props.initialValid || false,
        isTouched: false
    });

    const { id, onInput, element, type, placeholder, options } = props;
    const { value, isValid } = inputState;

    useEffect(() => {
        onInput(id, value, isValid);
    }, [id, value, isValid, onInput]);

    const changeHandler = event => {
        dispatch({
            type: 'CHANGE',
            val: event.target.value,
            validators: props.validators
        });
    };

    const touchHandler = () => {
        dispatch({ type: 'TOUCH' });
    };

    let inputElement = null;

    if (element === 'input') {
        inputElement = <input id={id} type={type} placeholder={placeholder} onChange={changeHandler} onBlur={touchHandler} value={value} />;
    } else if (element === 'textarea') {
        inputElement = <textarea id={id} rows={props.rows || 3} onChange={changeHandler} onBlur={touchHandler} value={value} />;
    } else if (element === 'select') {
        inputElement = (
            <select id={id} onChange={changeHandler} onBlur={touchHandler} value={value}>
                {options.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
        );
    }

    return (
        <div className={`form-control ${!isValid && inputState.isTouched ? 'form-control--invalid' : ''}`}>
            <label htmlFor={id}>{props.label}</label>
            {inputElement}
            {!isValid && inputState.isTouched && <p>{props.errorText}</p>}
        </div>
    );
};

export default Input;

================
File: src/shared/components/Navigation/HomeNavigation.css
================
/* HomeNavigation.css */
.home-navigation {
    background-color: #00000000;
    padding: 1rem;
  }
  
  .home-navigation-title {
    text-align: center;
    margin-left: 88%;
    font-size: 200%;
  }

================
File: src/shared/components/Navigation/HomeNavigation.js
================
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';

import TriangleButton from '../UIElements/TriangleButton';

import './HomeNavigation.css';



const HomeNavigation = () => {

    const navigate = useNavigate();


    const navToLogin =() =>{
        navigate('/auth')
    }
  return (
    <header className="home-navigation">
      <div className="home-navigation-title">
        {/* <TriangleButton fontSize={'50%'}children={'Login'} onClick={navToLogin}/> */}

        
      </div>
      {/* Add any home-specific links or design here */}
    </header>
  );
};

export default HomeNavigation;

================
File: src/shared/components/Navigation/MainHeader.css
================
.main-header {
  width: 100%;
  height: 4rem;
  display: flex;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  background: #ff0055;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.26);
  padding: 0 1rem;
  z-index: 5;
}

main {
  margin-top: 5rem;
}

@media (min-width: 768px) {
  .main-header {
    justify-content: space-between;
  }
}

================
File: src/shared/components/Navigation/MainHeader.js
================
import React from 'react';

import './MainHeader.css';

const MainHeader = props => {
  return <header className="main-header">{props.children}</header>;
};

export default MainHeader;

================
File: src/shared/components/Navigation/MainNavigation.css
================
.main-navigation__menu-btn {
  width: 3rem;
  height: 3rem;
  background: transparent;
  border: none;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  margin-right: 2rem;
  cursor: pointer;
}

.main-navigation__menu-btn span {
  display: block;
  width: 3rem;
  height: 2.5px;
  background: white;
}

.main-navigation__title {
  color: white;
}

.main-navigation__title a {
  text-decoration: none;
  color: white;
}

.main-navigation__header-nav {
  display: none;
}

.main-navigation__drawer-nav {
  height: 100%;
}

@media (min-width: 768px) {
  .main-navigation__menu-btn {
    display: none;
  }

  .main-navigation__header-nav {
    display: block;
  }
}
.main-header{
  z-index: 21;
}

================
File: src/shared/components/Navigation/MainNavigation.js
================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';

import MainHeader from './MainHeader';
import NavLinks from './NavLinks';
import SideDrawer from './SideDrawer';
import Backdrop from '../UIElements/Backdrop';
import NavProfile from './NavProfile';
import './MainNavigation.css';

const MainNavigation = props => {
  const [drawerIsOpen, setDrawerIsOpen] = useState(false);

  const openDrawerHandler = () => {
    setDrawerIsOpen(true);
  };

  const closeDrawerHandler = () => {
    setDrawerIsOpen(false);
  };

  return (
    <>
      {drawerIsOpen && <Backdrop onClick={closeDrawerHandler} />}
      <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>
        <nav className="main-navigation__drawer-nav">
          <NavLinks />
        </nav>
      </SideDrawer>

      <MainHeader>
        <button className="main-navigation__menu-btn" onClick={openDrawerHandler}>
          <span />
          <span />
          <span />
        </button>
        <h1 className="main-navigation__title">
          <Link to="/">OurOutdoors</Link>
        </h1>
        <nav className="main-navigation__header-nav">
          <NavLinks userId = {props.userId} username = {props.username} profilePic = {props.profilePic} />
        </nav>
      </MainHeader>
    </>
  );
};

export default MainNavigation;

================
File: src/shared/components/Navigation/NavLinks.css
================
.nav-links {
  list-style: none;
  margin-right: 2em;
  padding: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.nav-links li {
  margin: 1rem;
}
.nav-profilePic{
  display: block;
  width: 2em !important;
  height: 2em !important;
  border: 1px solid black !important;
  border-radius: 50% !important;
}
.nav-profilePic-link{
  width:100%;
  height:100%;
}

.nav-links a {
  border: 1px solid transparent;
  color: #292929;
  text-decoration: none;
  padding: 0.5rem;
}

.nav-links a:hover,
.nav-links a:active,
.nav-links a.active {
  background: #f8df00;
  border-color: #292929;
  color: #292929;
}

.nav-links button {
  cursor: pointer;
  border: 1px solid #292929;
  color: #292929;
  background: transparent;
  padding: 0.5rem;
  font: inherit;
}

.nav-links button:focus {
  outline: none;
}

.nav-links button:hover,
.nav-links button:active {
  background: #292929;
  color: white;
}

@media (min-width: 768px) {
  .nav-links {
    flex-direction: row;
  }

  .nav-links div li {
    margin: 0 0.5rem;
  }

  .nav-links div a {
    color: white;
    text-decoration: none;
  }

  .nav-links div button {
    border: 1px solid white;
    color: white;
    background: transparent;
  }
  
  .nav-links div button:hover,
  .nav-links div button:active {
    background: #f8df00;
    color: #292929;
  }
}

================
File: src/shared/components/Navigation/NavLinks.js
================
import React, { useContext } from 'react';
import { NavLink, Link } from 'react-router-dom';
import { AuthContext } from '../../context/auth-context'; // Adjust path as necessary

import './NavLinks.css';
import NotificationBell from '../Notifications/NotificationBell';


const NavLinks = () => {
  const { isLoggedIn } = useContext(AuthContext);

  return (
    <ul className="nav-links">
      {/*<li>
        <NavLink to="/calendar">Calendar</NavLink>
      </li>*/}
      {isLoggedIn && (
        <>
          <li>
            <NavLink to="/feed">Feed</NavLink>
          </li>
          <li>
            <NavLink to="/friends">Friends</NavLink>
          </li>
          <li>
            <NavLink to="/myTrips">MyTrips</NavLink>
          </li>
          <li>
            <NotificationBell/>
          </li>

          <li>
            {/* TODO: set to dynamic route!!! */}
            <Link className='nav-profilePic' to="/profile/6626b2cf4c383e4719160c6a" />
          </li>
        </>
      )}
      {!isLoggedIn && (
        <li>
          <NavLink to="/auth">Login</NavLink>
        </li>
      )}
    </ul>
  );
};

export default NavLinks;

================
File: src/shared/components/Navigation/NavProfile.js
================
import React from "react";

import { NavLink } from 'react-router-dom';

const NavProfile = props => {
    return (
        <>
            <ul>
                <li>
                    <h3>{props.username}</h3>
                </li>
                <li>
                    <NavLink className='' to={`/profile/${props.userId}`}>
                        <div style={{
                            width: '50px', // size of the circle
                            height: '50px',
                            borderRadius: '50%', // div circular
                            overflow: 'hidden', // so image doesn't overflow the circular shape
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center'
                        }}>
                        <img src={props.profilePic} style={{
                            width: 'auto',
                            height: '100%', // Adjusts the image height to fill the circle
                            display: 'block'
                        }} />
                    
                        </div>
                    </NavLink >
                </li>
            </ul>
        </>
        //TODO
        //profile image
    );
};

export default NavProfile;

================
File: src/shared/components/Navigation/SideDrawer.css
================
.side-drawer {
  position: fixed;
  left: 0;
  top: 0;
  z-index: 100;
  height: 100vh;
  width: 70%;
  background: white;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
}

================
File: src/shared/components/Navigation/SideDrawer.js
================
import React from 'react';
import ReactDOM from 'react-dom';
import { CSSTransition } from 'react-transition-group';

import './SideDrawer.css';

const SideDrawer = props => {
  const content = (
    <CSSTransition
      in={props.show}
      timeout={200}
      classNames="slide-in-left"
      mountOnEnter
      unmountOnExit
    >
      <aside className="side-drawer" onClick={props.onClick}>{props.children}</aside>
    </CSSTransition>
  );

  return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));
};

export default SideDrawer;

================
File: src/shared/components/Notifications/MarkNotificationAsRead.js
================
const markNotificationsAsRead = async (notificationIds) => {
    try {
      await fetch('/api/notifications/mark-as-read', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ notificationIds }),
      });
    } catch (error) {
      console.error('Error marking notifications as read:', error);
    }
  };

================
File: src/shared/components/Notifications/Notification.css
================
.notification-bell {
    position: relative;
    cursor: pointer;
    max-width: 100%;
    height:2.7em;
    width:2.7em;
  }
  .bell-icon{
    max-width:100%;
    height:100%;
  }
  .unread-count {
    background-color: red;
    color: white;
    border-radius: 50%;
    padding: 0.2em 0.5em;
    font-size: 0.8em;
    position: absolute;
    top: 0;
    right: 0;
  }
  
  .notification-dropdown {
    position: absolute;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 10px;
    width: 250px;
    top: 30px;
    right: 0;
    z-index: 1000;
  }
  
  .notification-item {
    padding: 10px;
    border-bottom: 1px solid #eee;
  }
  
  .notification-item:last-child {
    border-bottom: none;
  }
  
.view-notifcation{
    background-color: yellow;
}

================
File: src/shared/components/Notifications/NotificationBell.js
================
import { useEffect, useState } from 'react';
import NotificationList from './NotificationList';  // Import the NotificationList child component
import './Notification.css';
import bell from './bell.png'

const NotificationBell = () => {
  const userId = '6626b2cf4c383e4719160c6a';  // Replace with dynamic user ID as needed
  const [unreadCount, setUnreadCount] = useState(0);
  const [notifications, setNotifications] = useState([]);
  const [isDropdownVisible, setIsDropdownVisible] = useState(false);

  useEffect(() => {
    const fetchUnreadNotifications = async () => {
      try {
        const response = await fetch(`http://localhost:5000/api/notifications/getUserNotification/${userId}`);

        if (!response.ok) {
          throw new Error(`Error: ${response.status}`);
        }

        const responseData = await response.json();
        setUnreadCount(responseData.count);
        setNotifications(responseData.notifications);
      } catch (error) {
        console.error('Error fetching unread notifications:', error);
      }
    };

    fetchUnreadNotifications();

    // Poll for notifications every 15 seconds
    const intervalId = setInterval(fetchUnreadNotifications, 15000);

    // Clean up the interval when the component unmounts
    return () => clearInterval(intervalId);
  }, [userId]);

  // Toggle dropdown visibility
  const toggleDropdown = () => {
    setIsDropdownVisible(prevState => !prevState);
  };

  return (
    <div className="notification-bell">
      <img className='bell-icon' onClick={toggleDropdown} src={bell}></img>
      {unreadCount > 0 && <span className="unread-count">{unreadCount}</span>}

      {/* Render the NotificationList dropdown when the bell is clicked */}
      {isDropdownVisible && <NotificationList notifications={notifications} />}
    </div>
  );
};

export default NotificationBell;

================
File: src/shared/components/Notifications/NotificationItem.js
================
const NotificationItem = ({ notification }) => {
    return (
      <li className="notification-item">
        <p>{notification.message}</p>
        {notification.link && <a className='view-notification' href={notification.link}>View</a>}
      </li>
    );
  };
  
  export default NotificationItem;

================
File: src/shared/components/Notifications/NotificationList.js
================
import NotificationItem from './NotificationItem';  // Import the NotificationItem child component

const NotificationList = ({ notifications }) => {
  return (
    <div className="notification-dropdown">
      {notifications.length > 0 ? (
        <ul>
          {notifications.map(notification => (
            <NotificationItem key={notification._id} notification={notification} />
          ))}
        </ul>
      ) : (
        <p>No unread notifications</p>
      )}
    </div>
  );
};

export default NotificationList;

================
File: src/shared/components/UIElements/Avatar.css
================
.avatar {
  width: 100%;
  height: 100%;
  display: flex; 
  justify-content: center;
  align-items: center;
}

.avatar img {
  display: block;
  border-radius: 50%;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

================
File: src/shared/components/UIElements/Avatar.js
================
import React from 'react';

import './Avatar.css';

const Avatar = props => {
  return (
    <div className={`avatar ${props.className}`} style={props.style}>
      <img
        src={props.image}
        alt={props.alt}
        style={{ width: props.width, height: props.width }}
      />
    </div>
  );
};

export default Avatar;

================
File: src/shared/components/UIElements/Backdrop.css
================
.backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  background: rgba(0, 0, 0, 0.75);
  z-index: 10;
}

================
File: src/shared/components/UIElements/Backdrop.js
================
import React from 'react';
import ReactDOM from 'react-dom';

import './Backdrop.css';

const Backdrop = props => {
  return ReactDOM.createPortal(
    <div className="backdrop" onClick={props.onClick}></div>,
    document.getElementById('backdrop-hook')
  );
};

export default Backdrop;

================
File: src/shared/components/UIElements/Card.css
================
.card {
  margin: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  border-radius: 6px;
  padding: 1rem;
  overflow: hidden;
  background: white;
}

================
File: src/shared/components/UIElements/Card.js
================
import React from 'react';

import './Card.css';

const Card = props => {
  return (
    <div className={`card ${props.className}`} style={props.style}>
      {props.children}
    </div>
  );
};

export default Card;

================
File: src/shared/components/UIElements/ErrorModal.js
================
import React from 'react';

import Modal from './Modal';
import Button from '../FormElements/Button';

const ErrorModal = props => {
  return (
    <Modal
      onCancel={props.onClear}
      header="An Error Occurred!"
      show={!!props.error}
      footer={<Button onClick={props.onClear}>Okay</Button>}
    >
      <p>{props.error}</p>
    </Modal>
  );
};

export default ErrorModal;

================
File: src/shared/components/UIElements/LoadingSpinner.css
================
.lds-dual-ring {
  display: inline-block;
  width: 64px;
  height: 64px;
}

.lds-dual-ring:after {
  content: ' ';
  display: block;
  width: 46px;
  height: 46px;
  margin: 1px;
  border-radius: 50%;
  border: 5px solid #510077;
  border-color: #510077 transparent #510077 transparent;
  animation: lds-dual-ring 1.2s linear infinite;
}

.loading-spinner__overlay {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: rgba(255, 255, 255, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
}

@keyframes lds-dual-ring {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

================
File: src/shared/components/UIElements/LoadingSpinner.js
================
import React from 'react';

import './LoadingSpinner.css';

const LoadingSpinner = props => {
  return (
    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>
      <div className="lds-dual-ring"></div>
    </div>
  );
};

export default LoadingSpinner;

================
File: src/shared/components/UIElements/Modal.css
================
.modal {
    z-index: 100;
    position: fixed;
    top: 22vh;
    left: 10%;
    width: 80%;
    background: white;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
    border-radius: 8px;
  }
  
  .modal__header {
    width: 100%;
    padding: 1rem 0.5rem;
    background: #2a006e;
    color: white;
  }
  
  .modal__header h2 {
    margin: 0.5rem;
  }
  
  .modal__content {
    padding: 1rem 0.5rem;
  }
  
  .modal__footer {
    padding: 1rem 0.5rem;
  }
  
  @media (min-width: 768px) {
    .modal {
      left: calc(50% - 20rem);
      width: 40rem;
    }
  }
  
  .modal-enter {
    transform: translateY(-10rem);
    opacity: 0;
  }
  
  .modal-enter-active {
    transform: translateY(0);
    opacity: 1;
    transition: all 200ms;
  }
  
  .modal-exit {
    transform: translateY(0);
    opacity: 1;
  }
  
  .modal-exit-active {
    transform: translateY(-10rem);
    opacity: 0;
    transition: all 200ms;
  }

================
File: src/shared/components/UIElements/Modal.js
================
import React from 'react';
import ReactDOM from 'react-dom';
import { CSSTransition } from 'react-transition-group';

import Backdrop from './Backdrop';
import './Modal.css';

const ModalOverlay = props => {
  const content = (
    <div className={`modal ${props.className}`} style={props.style}>
      <header className={`modal__header ${props.headerClass}`}>
        <h2>{props.header}</h2>
      </header>
      <form
        onSubmit={
          props.onSubmit ? props.onSubmit : event => event.preventDefault()
        }
      >
        <div className={`modal__content ${props.contentClass}`}>
          {props.children}
        </div>
        <footer className={`modal__footer ${props.footerClass}`}>
          {props.footer}
        </footer>
      </form>
    </div>
  );
  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));
};

const Modal = props => {
  return (
    <>
      {props.show && <Backdrop onClick={props.onCancel} />}
      <CSSTransition
        in={props.show}
        mountOnEnter
        unmountOnExit
        timeout={200}
        classNames="modal"
      >
        <ModalOverlay {...props} />
      </CSSTransition>
    </>
  );
};

export default Modal;

================
File: src/shared/components/UIElements/TriangleButton.css
================
.btn-5,
.btn-5 *,
.btn-5 :after,
.btn-5 :before,
.btn-5:after,
.btn-5:before {
  border: 0 solid;
  box-sizing: border-box;
}
.btn-5 {
  -webkit-tap-highlight-color: transparent;
  -webkit-appearance: button;
  background-color: #000;
  background-image: none;
  color: #fff;
  cursor: pointer;
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
    Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif,
    Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
  font-size: 100%;
  font-weight: 900;
  line-height: 1.5;
  margin: 0;
  -webkit-mask-image: -webkit-radial-gradient(#000, #fff);
  padding: 0;
  text-transform: uppercase;
}
.btn-5:disabled {
  cursor: default;
}
.btn-5:-moz-focusring {
  outline: auto;
}
.btn-5 svg {
  display: block;
  vertical-align: middle;
}
.btn-5 [hidden] {
  display: none;
}
.btn-5 {
  border-radius: 99rem;
  border-width: 2px;
  overflow: hidden;
  padding: 0.8rem 3rem;
  position: relative;
}
.btn-5 span {
  mix-blend-mode: difference;
}
.btn-5:before {
  --tilt: 1.2rem;
  background: #fff;
  -webkit-clip-path: polygon(
    0 0,
    calc(100% - var(--tilt)) 0,
    100% 50%,
    calc(100% - var(--tilt)) 100%,
    0 100%
  );
  clip-path: polygon(
    0 0,
    calc(100% - var(--tilt)) 0,
    100% 50%,
    calc(100% - var(--tilt)) 100%,
    0 100%
  );
  content: "";
  display: block;
  height: 100%;
  left: calc(-100% - var(--tilt));
  position: absolute;
  top: 0;
  transform: translateX(var(--progress, 0));
  transition: transform 0.2s ease;
  width: calc(100% + var(--tilt));
}
.btn-5:hover:before {
  --progress: 100%;
}

/*
CREDIT:Eluda -- https://ui-buttons.web.app/rush-triangle
*/

================
File: src/shared/components/UIElements/TriangleButton.js
================
import React from 'react';
import './TriangleButton.css'; // Import the CSS file with your button styles

const TriangleButton = ({ children, onClick, fontSize, disabled = false }) => {
  return (
    <button
      className="btn-5"
      onClick={onClick}
      disabled={disabled}
      style={{ fontSize }}
    >
      <span>{children}</span>
    </button>
  );
};

export default TriangleButton;

================
File: src/shared/context/auth-context.js
================
import { createContext } from "react";

export const AuthContext = createContext({
    isLoggedIn:false, 
    login:() => {}, 
    logout: () => {}
});

================
File: src/shared/hooks/form-hook.js
================
import { useCallback, useReducer } from 'react';

const formReducer = (state, action) => {
    switch(action.type){
        case 'INPUT_CHANGE':
            let formIsValid = true;
            for (const inputId in state.inputs){
                if(!state.inputs[inputId]){
                    continue;
                }
                
                {/* checks to see if their is any false isValid states and returns formIsValid as false */}
                if (inputId === action.inputId){
                    formIsValid = formIsValid && action.isValid;
                } else{
                    formIsValid = formIsValid && state.inputs [inputId].isValid;
                }
            }
            return {
                ...state,
                inputs:{
                    ...state.inputs,
                    [action.inputId]: {value: action.value, isValid: action.isValid}
                },
                isValid: formIsValid
            };
            case 'SET_DATA':
                return {
                    inputs: action.inputs,
                    isValid: action.formIsValid
                }
        default:
            return state;
    }
};

export const useForm = (initialInputs, initialFormValidity) => {
    const [formState, dispatch] = useReducer(formReducer,{
        inputs: initialInputs,
        isValid: initialFormValidity
    });

    const inputHandler = useCallback((id, value, isValid) => {
        dispatch({type: 'INPUT_CHANGE', value: value, isValid:isValid, inputId: id})
    }, [dispatch]);

    const setFormData = useCallback((inputData, formValidity) => {
        dispatch({
            type: 'SET_DATA',
            inputs: inputData,
            formIsValid: formValidity
        });
    },[]);

    return [formState, inputHandler, setFormData];
};

================
File: src/shared/hooks/http-hook.js
================
import { useState, useCallback, useRef, useEffect } from 'react';

export const useHttpClient = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState();

  const activeHttpRequests = useRef([]);

  const sendRequest = useCallback(
    async (url, method = 'GET', body = null, headers = {}) => {
      setIsLoading(true);
      const httpAbortCtrl = new AbortController();
      activeHttpRequests.current.push(httpAbortCtrl);

      try {
        const response = await fetch(url, {
          method,
          body,
          headers,
          signal: httpAbortCtrl.signal
        });

        const responseData = await response.json();

        activeHttpRequests.current = activeHttpRequests.current.filter(
          reqCtrl => reqCtrl !== httpAbortCtrl
        );

        if (!response.ok) {
          throw new Error(responseData.message);
        }

        setIsLoading(false);
        return responseData;
      } catch (err) {
        setError(err.message);
        setIsLoading(false);
        throw err;
      }
    },
    []
  );

  const clearError = () => {
    setError(null);
  };

  useEffect(() => {
    return () => {
      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());
    };
  }, []);

  return { isLoading, error, sendRequest, clearError };
};

================
File: src/shared/util/validators.js
================
const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';
const VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';
const VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';
const VALIDATOR_TYPE_MIN = 'MIN';
const VALIDATOR_TYPE_MAX = 'MAX';
const VALIDATOR_TYPE_EMAIL = 'EMAIL';
const VALIDATOR_TYPE_FILE = 'FILE';

export const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });
export const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });
export const VALIDATOR_MINLENGTH = val => ({
  type: VALIDATOR_TYPE_MINLENGTH,
  val: val
});
export const VALIDATOR_MAXLENGTH = val => ({
  type: VALIDATOR_TYPE_MAXLENGTH,
  val: val
});
export const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });
export const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });
export const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });

export const validate = (value, validators) => {
  let isValid = true;
  for (const validator of validators) {
    if (validator.type === VALIDATOR_TYPE_REQUIRE) {
      isValid = isValid && value.trim().length > 0;
    }
    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {
      isValid = isValid && value.trim().length >= validator.val;
    }
    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {
      isValid = isValid && value.trim().length <= validator.val;
    }
    if (validator.type === VALIDATOR_TYPE_MIN) {
      isValid = isValid && +value >= validator.val;
    }
    if (validator.type === VALIDATOR_TYPE_MAX) {
      isValid = isValid && +value <= validator.val;
    }
    if (validator.type === VALIDATOR_TYPE_EMAIL) {
      isValid = isValid && /^\S+@\S+\.\S+$/.test(value);
    }
  }
  return isValid;
};

================
File: src/sports/pages/SportPage.js
================
import React, { useState, useEffect, useContext} from "react";
import { useParams, useNavigate } from 'react-router-dom';
import EventList from '../../feed/components/EventList'; // Ensure this path is correct
import { AuthContext } from '../../shared/context/auth-context'; 
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import ErrorModal from '../../shared/components/UIElements/ErrorModal'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';

const SportPage = () => {
    const { sportId } = useParams(); 

    const USER_ID = '6626b2cf4c383e4719160c6a';//
    const auth = useContext(AuthContext);
    const navigate = useNavigate();
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    const [loadedEvents, setLoadedEvents] = useState(null);  



    useEffect(() => {
        const fetchEvents = async () => {
          try {
            const responseData = await sendRequest(
                `http://localhost:5000/api/sports/${sportId}`
            );
    
            setLoadedEvents(responseData.events);
          } catch (err) {}
        };
        fetchEvents();
  
      }, [sendRequest]);
      

    // filtering the events based on sportId
    //const events = mockEvents.filter(event => event.sportId.toLowerCase().replace(' ', '-') === sportId.toLowerCase());

    // Convert sportId back to a normal string ("Mountain Biking")
    const sportName = sportId.replace('-', ' ');


    return (

        <>
            {isLoading && (
                <div className="center">
                    <LoadingSpinner />
                </div>
             )}
            <div>
                <h1>{sportName}</h1>
            </div>

            {!isLoading && loadedEvents && <EventList items={loadedEvents} /> }
        </>
    );
};

export default SportPage;

================
File: src/sports/pages/Sports.js
================
import React from "react";
import { Link } from 'react-router-dom';

import Card from '../../shared/components/UIElements/Card'; 

const Sports = () => {
    const DUMMY_SPORTS = [
        {
            id: 'Mountain-Biking',
            name: 'Mountain Biking',
            image: '/pictures/sports/mountainBiking.jpg',
            description: 'Shred down Mountains on a funny two-wheeled monkey invention'
        },
        {
            id: 'Hiking',
            name: 'Hiking',
            image: '/pictures/sports/hiking.jpg',
            description: 'Lose yourself on the trail'
        },
        {
            id: 'Scuba-Diving',
            name: 'Scuba Diving',
            image: '/pictures/sports/scuba.jpg',
            description: 'Disappear into the depths'
        },
        {
            id: 'Kayaking',
            name: 'Kayaking',
            image: '/pictures/sports/kayak.jpg',
            description: 'Float down a chill and chilly river'
        },
        {
            id: 'Running',
            name: 'Running',
            image: '/pictures/sports/running.jpg',
            description: 'The sport other sports use as punishment'
        },
        {
            id: 'Skiing',
            name: 'Skiing',
            image: '/pictures/sports/skiing.jpg',
            description: 'Fast as you can down a mountain on sticks'
        },
        {
            id: 'Other',
            name: 'Other',
            image: '/pictures/sports/other.jpg',
            description: 'Whatever your fancy is ;)'
        }

    ];

    return (
        <div>
            <ul style={{ listStyle: 'none', padding: 0 }}> {/* Remove list styling */}
                {DUMMY_SPORTS.map(sport => (
                    <li key={sport.id}>
                        <Card style={{ margin: 5 }}>
                            <Link to={`/sports/${sport.id}`} style={{ textDecoration: 'none', color: 'inherit' }}>
                                <div style={{ textAlign: 'center' }}>
                                    {/*<img src={sport.image} alt={sport.name} style={{ maxWidth: '100%', height: 'auto' }} />*/}
                                    <h3>{sport.name}</h3>
                                    <p>{sport.description}</p>
                                </div>
                            </Link>
                        </Card>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Sports;

================
File: src/users/components/FriendRequests.js
================
import React, { useEffect, useState } from 'react';
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';
import ErrorModal from '../../shared/components/UIElements/ErrorModal';
import Button from '../../shared/components/FormElements/Button';
import pfp from '../../pictures/profilePic.jpg'; // Placeholder image
import './FriendRequests.css'; // Add custom styling if necessary

const FriendRequests = ({ userId }) => {
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    const [friendRequests, setFriendRequests] = useState([]);

    // Fetch friend requests when component mounts
    useEffect(() => {
        const fetchFriendRequests = async () => {
            try {
                const responseData = await sendRequest(`http://localhost:5000/api/users/${userId}/friend-requests`);
                setFriendRequests(responseData.friendRequests);
            } catch (err) {
                console.error('Failed to fetch friend requests:', err);
            }
        };

        if (userId) {
            fetchFriendRequests();
        }
    }, [userId, sendRequest]);

    const handleAcceptRequest = async (requesterId) => {
        try {
            await sendRequest(
                `http://localhost:5000/api/users/accept-friend-request`,
                'PATCH',
                JSON.stringify({
                    userId: userId,        // Current user's ID
                    senderId: requesterId  // Requester's ID
                }),
                { 'Content-Type': 'application/json' }
            );

            // Remove the request from the list after accepting
            setFriendRequests(prevRequests =>
                prevRequests.filter(request => request.id !== requesterId)
            );
        } catch (err) {
            console.error('Failed to accept friend request:', err);
        }
    };

    const handleDenyRequest = async (requesterId) => {
        try {
            await sendRequest(
                `http://localhost:5000/api/users/reject-friend-request`,
                'PATCH',
                JSON.stringify({
                    userId: userId,        // Current user's ID
                    senderId: requesterId  // Requester's ID
                }),
                { 'Content-Type': 'application/json' }
            );

            // Remove the request from the list after denying
            setFriendRequests(prevRequests =>
                prevRequests.filter(request => request.id !== requesterId)
            );
        } catch (err) {
            console.error('Failed to deny friend request:', err);
        }
    };

    if (isLoading) {
        return <LoadingSpinner asOverlay />;
    }

    if (error) {
        return <ErrorModal error={error} onClear={clearError} />;
    }
    /*<img src={request.profileImage || pfp} alt={request.name} className="friend-request-image" />*/

    return (
        <div className="friend-requests">
            <h3>Friend Requests</h3>
            {friendRequests.length === 0 ? (
                <p>No friend requests found.</p>
            ) : (
                <ul>
                    {friendRequests.map(request => (
                        <li key={request.id} className="friend-request-item">
                            <div className="friend-request-info">
                                <p>{request.name}</p>
                                <div className="friend-request-actions">
                                    <Button onClick={() => handleAcceptRequest(request.id)} success>
                                        Accept
                                    </Button>
                                    <Button onClick={() => handleDenyRequest(request.id)} danger>
                                        Deny
                                    </Button>
                                </div>
                            </div>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
};

export default FriendRequests;

================
File: src/users/components/FriendsList.js
================
import React, { useEffect, useState } from 'react';
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';
import ErrorModal from '../../shared/components/UIElements/ErrorModal';
import pfp from '../../pictures/profilePic.jpg'; // Placeholder image
import './FriendsList.css'; // Add custom styling if necessary

const FriendsList = ({ userId }) => {
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    const [friends, setFriends] = useState([]);

    useEffect(() => {
        const fetchFriends = async () => {
            try {
                // Use the new API endpoint to get friends
                const responseData = await sendRequest(`http://localhost:5000/api/users/${userId}/friends`);
                setFriends(responseData.friends);
            } catch (err) {
                console.error('Failed to fetch friends data:', err);
            }
        };

        if (userId) {
            fetchFriends();
        }
    }, [userId, sendRequest]);

    if (isLoading) {
        return <LoadingSpinner asOverlay />;
    }

    if (error) {
        return <ErrorModal error={error} onClear={clearError} />;
    }

    /*<img src={friend.profileImage || pfp} alt={friend.name} className="friend-image" />*/

    return (
        <div className="friends-list">
            <h3>Friends</h3>
            {friends.length === 0 ? (
                <p>No friends found.</p>
            ) : (
                <ul>
                    {friends.map(friend => (
                        <li key={friend.id} className="friend-item">
                            <p>{friend.name}</p>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
};

export default FriendsList;

================
File: src/users/components/PrivateRoute.js
================
import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const PrivateRoute = ({ component: Component, ...rest }) => {
  const { user } = useAuth();

  return (
    <Route
      {...rest}
      render={(props) =>
        user ? <Component {...props} /> : <Redirect to="/login" />
      }
    />
  );
};

export default PrivateRoute;

================
File: src/users/pages/Auth.css
================
.authentication__header {
    color: white;
    text-align: center;
  }
  
  .authentication {
    width: 90%;
    max-width: 25rem;
    margin: 7rem auto;
    text-align: center;
  }
  
  .authentication form {
    margin-bottom: 1rem;
  }

================
File: src/users/pages/Auth.js
================
import React, { useState, useContext } from "react";
import { useNavigate } from 'react-router-dom';


import Input from '../../shared/components/FormElements/Input';
import Button from '../../shared/components/FormElements/Button';
import Card from "../../shared/components/UIElements/Card";
import { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';
import { useForm } from '../../shared/hooks/form-hook';
import { AuthContext } from "../../shared/context/auth-context";

import "./Auth.css";

const Auth = () => {

    const auth = useContext(AuthContext);
    const navigate = useNavigate();


    const [isLogin, setIsLogin] = useState(true);

    const [formState, inputHandler, setFormData] = useForm({
        email: {
            value: '',
            isValid: false
        },
        password: {
            value: '',
            isValid: false
        }
    },false);

    const authSubmitHandler = event => {
        event.preventDefault();
        //TODO replace with backend logic
        console.log(formState.inputs);

        if (isLogin) {
            auth.login();
            navigate('/profile');
        } else {
            auth.login();
            navigate('/profile');
        }
    };

    const switchModeHandler = () => {
        if(!isLogin){
            setFormData({
                ...formState.inputs,
                name: undefined
            }, formState.inputs.email.isValid && formState.inputs.password.isValid)
        } else {
            setFormData({
                ...formState.inputs,
                name: {
                    value: '',
                    isValid: false
                }
            },false);
        }
        setIsLogin(prevMode => !prevMode);
    };

    return (
    <Card className="authentification">
        <h2>Login Required</h2>
        <hr/>
        <form onSubmit={authSubmitHandler}>
            {!isLogin && (
            <Input 
                element="input" 
                id="name" 
                type="text" 
                label="Your Name" 
                validators={[VALIDATOR_REQUIRE()]}
                errorText="Please enter a name."
                onInput={inputHandler}
            
            />)}
            <Input 
                id="email"
                element='input' 
                type="email" 
                label="Email" 
                validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]} 
                errorText='Please enter a valid email.' 
                onInput={inputHandler}
            />

            <Input 
                id="password"
                element='input' 
                label="Password" 
                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(5)]} 
                errorText='Please enter a valid password, at least 5 characters.' 
                onInput={inputHandler}
            />


            <Button type='submit' disabled={!formState.isValid}>
                {isLogin ? 'LOGIN' : 'SIGNUP'}
            </Button>
        </form>
        <Button inverse onClick={switchModeHandler}>
            SWITCH TO {isLogin ? 'SIGNUP': 'LOGIN'}
        </Button>
    </Card>
)};
//add a form that renders a email and a password
export default Auth;

================
File: src/users/pages/EditProfile.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Card from '../../shared/components/UIElements/Card';
import Input from '../../shared/components/FormElements/Input';
import Button from '../../shared/components/FormElements/Button';
import { useForm } from '../../shared/hooks/form-hook';
import { VALIDATOR_REQUIRE, VALIDATOR_EMAIL } from '../../shared/util/validators';
import Modal from '../../shared/components/UIElements/Modal';
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import ErrorModal from '../../shared/components/UIElements/ErrorModal'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';

const EditProfile = () => {
    const { userId } = useParams();
    const navigate = useNavigate();
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    const [showModal, setShowModal] = useState(false);
    const [loadedUser, setLoadedUser] = useState(null);

    const [formState, inputHandler, setFormData] = useForm({
        name: { value: '', isValid: false },
        about: { value: '', isValid: false },
        email: { value: '', isValid: false }
    }, false);

    useEffect(() => {
        const fetchUser = async () => {
            try {
                const responseData = await sendRequest(`http://localhost:5000/api/users/${userId}`);
                setLoadedUser(responseData.user);
                setFormData({
                    name: { value: responseData.user.name, isValid: true },
                    about: { value: responseData.user.about, isValid: true },
                    email: { value: responseData.user.email, isValid: true }
                }, true);
            } catch (err) {
                console.error("Failed to fetch user data:", err);
            }
        };
        if (!loadedUser) fetchUser();
    }, [userId, sendRequest, setFormData, loadedUser]);

    const profileUpdateSubmitHandler = async event => {
        event.preventDefault();
        try {
            await sendRequest(
                `http://localhost:5000/api/users/${userId}`,
                'PATCH',
                JSON.stringify({
                    name: formState.inputs.name.value,
                    about: formState.inputs.about.value,
                    email: formState.inputs.email.value
                }),
                { 'Content-Type': 'application/json' }
            );
            setShowModal(true);
        } catch (err) {
            console.error('Failed to update the user:', err);
        }
    };

    if (isLoading || !loadedUser) {
        return <LoadingSpinner />;
    }

    return (
        <>
            <ErrorModal error={error} onClear={clearError} />
            <Modal
                show={showModal}
                onCancel={() => setShowModal(false)}
                header="Profile Updated Successfully!"
                footer={<Button onClick={() => navigate(`/profile/${userId}`)}>Go to Profile</Button>}
            >
                <p>Your profile has been successfully updated!</p>
            </Modal>
            <Card>
                <form onSubmit={profileUpdateSubmitHandler}>
                    <Input
                        id="name"
                        element="input"
                        type="text"
                        label="Your Name"
                        validators={[VALIDATOR_REQUIRE()]}
                        onInput={inputHandler}
                        initialValue={formState.inputs.name.value}
                        initialValid={formState.inputs.name.isValid}
                    />
                    <Input
                        id="about"
                        element="textarea"
                        label="About"
                        validators={[VALIDATOR_REQUIRE()]}
                        onInput={inputHandler}
                        initialValue={formState.inputs.about.value}
                        initialValid={formState.inputs.about.isValid}
                    />
                    <Input
                        id="email"
                        element="input"
                        type="email"
                        label="Email"
                        validators={[VALIDATOR_EMAIL()]}
                        onInput={inputHandler}
                        initialValue={formState.inputs.email.value}
                        initialValid={formState.inputs.email.isValid}
                    />
                    <Button type="submit" disabled={!formState.isValid}>
                        Update Profile
                    </Button>
                </form>
            </Card>
        </>
    );
};

export default EditProfile;

================
File: src/users/pages/Friends.js
================
import React from "react";

const Friends = () => {
    return <p>Friends</p>
};

export default Friends;

================
File: src/users/pages/Profile.css
================
/* Profile.css */
.profile-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}

.profile-card, .events-card {
    width: 90%;
    max-width: 600px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border-radius: 8px;
    overflow: hidden;
}

.profile-header {
    display: flex;
    align-items: center;
    gap: 20px;
    padding: 20px;
}

.profile-image {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
}

.profile-info h2 {
    margin: 0;
    color: #333;
}

.profile-info p {
    font-size: 0.9rem;
    color: #666;
}

================
File: src/users/pages/Profile.js
================
import React, { useEffect, useState, useContext } from 'react';
import { useNavigate, useParams } from 'react-router-dom'; // Use useParams for dynamic userId
import Card from '../../shared/components/UIElements/Card';
import Button from '../../shared/components/FormElements/Button';
import EventList from '../../feed/components/EventList';
import { useHttpClient } from '../../shared/hooks/http-hook'; 
import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';
import ErrorModal from '../../shared/components/UIElements/ErrorModal';
import FriendsList from '../../users/components/FriendsList'; // Import FriendsList
import FriendRequests from '../../users/components/FriendRequests'; // Import FriendRequests
import { AuthContext } from '../../shared/context/auth-context'; // For logged-in user context
import pfp from '../../pictures/profilePic.jpg';
import './Profile.css'; 

const Profile = () => {
    const auth = useContext(AuthContext); // Get the logged-in user's ID
    const { userId } = useParams(); // UseParams to get userId from URL
    const navigate = useNavigate();
    const { isLoading, error, sendRequest, clearError } = useHttpClient();
    
    const [userProfile, setUserProfile] = useState({
        name: '',
        about: '',
        profileImage: '',
    });
    const [loadedEvents, setLoadedEvents] = useState();
    const [friendRequestSent, setFriendRequestSent] = useState(false); // Track if request was sent

    useEffect(() => {
        const fetchProfile = async () => {
            try {
                const responseData = await sendRequest(`http://localhost:5000/api/users/${userId}`);
                const eventDataIn = await sendRequest(`http://localhost:5000/api/users/events/${userId}`);

                setUserProfile({
                    name: responseData.user.name,
                    about: responseData.user.about,
                    profileImage: responseData.user.profileImage || '',
                });
                setLoadedEvents(eventDataIn.events);
            } catch (err) {
                console.error('Failed to fetch profile data:', err);
            }
        };

        if (userId) {
            fetchProfile();
        }
    }, [userId, sendRequest]);

    const sendFriendRequestHandler = async () => {
        try {
            await sendRequest(
                `http://localhost:5000/api/users/send-friend-request`,
                'POST',
                JSON.stringify({
                    senderId: auth.userId, // Logged-in user's ID
                    recipientId: userId    // Profile userId (target)
                }),
                { 'Content-Type': 'application/json' }
            );

            setFriendRequestSent(true); // Mark as sent
        } catch (err) {
            console.error('Failed to send friend request:', err);
        }
    };

    if (isLoading) {
        return <LoadingSpinner asOverlay />;
    }

    if (error) {
        return <ErrorModal error={error} onClear={clearError} />;
    }

    return (
        <div className="profile-page">
            <Card className="profile-card">
                <div className="profile-header">
                    <img src={userProfile.profileImage || pfp} alt={userProfile.name} className="profile-image" />
                    <div className="profile-info">
                        <h2>{userProfile.name}</h2>
                        <p>{userProfile.about}</p>
                        
                        {/* Show "Edit Profile" button if this is the user's profile */}
                        {auth.userId === userId && (
                            <Button onClick={() => navigate(`/profile/edit/${userId}`)}>Edit Profile</Button>
                        )}

                        {/* Show "Send Friend Request" button if this is not the user's profile */}
                        {auth.userId !== userId && !friendRequestSent && (
                            <Button onClick={sendFriendRequestHandler}>Send Friend Request</Button>
                        )}

                        {/* Show confirmation if request was sent */}
                        {friendRequestSent && <p>Friend request sent!</p>}
                    </div>
                </div>
            </Card>

            {/* Display FriendRequests component only on the logged-in user's profile */}
            {auth.userId === userId && <FriendRequests userId={userId} />
            }
            <FriendRequests userId={userId} />

            {/* Display FriendsList */}
            <FriendsList userId={userId} />

            {!isLoading && loadedEvents && <EventList items={loadedEvents} />}
        </div>
    );
};

export default Profile;
